server.port: 8081
logging.config: classpath:logback-mcp-tool-gateway.xml
gateway:
  artifact-cache: file:.cache
  kill-script: file:{{BUILD_DIR}}/resources/main/kill-cdc.sh

authorization-server:
  base-uri: http://localhost:8080
  credits-path: /api/v1/credits/get
  credits-decrement-path: /api/v1/credits/get-and-decrement

otel:
  instrumentation:
    spring-web:
      enabled: false
    spring-webmvc:
      enabled: false
    spring-webflux:
      enabled: false
    jdbc:
      enabled: false
    kafka:
      enabled: false
    mongo:
      enabled: false
management:
  otlp:
    metrics:
      export:
        enabled: false


graphql-props:
  port: 8084
  url: http://localhost:8084/graphql

spring:
  dgs:
    graphql:
      enabled: false
  jpa:
    hibernate:
      ddl-auto: create-drop
  datasource:
    driver-class-name: org.postgresql.Driver
    username: postgres
    password: postgres
    jdbc-url: jdbc:postgresql://localhost:5405/postgres
    url: jdbc:postgresql://localhost:5405/postgres
    hikari:
      connection-timeout: 960000
  liquibase:
    enabled: false
  main:
    banner-mode: off
  ai:
    vectorstore.type: none
    mcp:
      server:
        stdio: false
        enabled: true
        type: sync
        name: "mcp-tool-gateway"
        version: 1.0.0
      client:
        name: replace-name

  docker:
    compose:
      file: file:{{PROJ_DIR}}/src/main/resources/docker/docker-compose.yml
      enabled: true
      skip:
        in-tests: false
      lifecycle-management: start_only
      start:
        skip: if_running
      readiness:
        wait: only_if_started
  security:
    oauth2:
      client:
        registration:
          cdc-oauth2-client:
            provider: cdc-oauth2-client
            client-id: cdc-oauth2-client
            client-secret: 234234lkjsldkdjfsd
            scope: profile, email
            authorization-grant-type: client_credentials
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            client-authentication-method: client_secret_post
            # if your provider doesn't have a userinfo endpoint, omit it and map from ID token instead
            # (but then you really want OIDC)
        provider:
          cdc-oauth2-client:
            authorization-uri: http://localhost:8080/oauth2/authorize
            token-uri:         http://localhost:8080/oauth2/token
            user-info-uri:     http://localhost:8080/userinfo
            user-name-attribute: sub
            jwk-set-uri:       http://localhost:8080/oauth2/jwks

keystore:
  key-path: {{PROJ_DIR}}/keys
  key-name: cdc-key



logging.level.org.springframework.web.servlet: DEBUG
logging.level.org.springframework.web.server: DEBUG
logging.level.org.springframework.boot.web.servlet: DEBUG
logging.level.org.springframework.boot.web.server: DEBUG
